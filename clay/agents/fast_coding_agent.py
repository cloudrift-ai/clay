"""Fast mode coding agent for improved performance."""

from typing import Dict, Any, List, Optional
import json

from .base import Agent, AgentResult, AgentContext, AgentStatus
from ..llm.base import LLMProvider


class FastCodingAgent(Agent):
    """Performance-optimized coding agent for simple tasks."""

    def __init__(self, llm_provider: Optional[LLMProvider] = None):
        super().__init__(
            name="coding_agent",
            description="Performance-optimized agent for simple coding tasks"
        )
        self.llm_provider = llm_provider

    async def think(self, prompt: str, context: AgentContext) -> AgentResult:
        """Fast single-pass processing without separate planning phase."""
        if not self.llm_provider:
            return await self._mock_think(prompt, context)

        system_prompt = self._build_fast_system_prompt(context)
        response = await self.llm_provider.complete(
            system_prompt=system_prompt,
            user_prompt=prompt,
            temperature=0.1,  # Lower temperature for faster, more focused responses
            max_tokens=1000   # Limit tokens for faster response
        )

        return self._parse_response(response.content)

    def _build_fast_system_prompt(self, context: AgentContext) -> str:
        """Build optimized system prompt for fast execution."""
        tools_desc = []
        for tool_name, tool in self.tools.items():
            tools_desc.append(f"- {tool_name}: {tool.description}")

        return f"""You are a fast, efficient coding assistant. Execute tasks quickly and directly.

Available tools:
{chr(10).join(tools_desc)}

Working directory: {context.working_directory}

IMPORTANT:
- Be concise but accurate
- Execute tools immediately without extensive planning
- Provide brief, focused responses
- Use JSON format for tool calls

Response format:
{{
    "tool_calls": [
        {{
            "name": "tool_name",
            "parameters": {{...}}
        }}
    ],
    "output": "Brief description of what was done"
}}

For information-only tasks:
{{
    "output": "Concise answer"
}}"""

    def _parse_response(self, response: str) -> AgentResult:
        """Parse LLM response with fallback for non-JSON."""
        # Try to extract JSON from markdown code blocks first
        if "```json" in response:
            start = response.find("```json") + 7
            end = response.find("```", start)
            if end != -1:
                json_content = response[start:end].strip()
                try:
                    data = json.loads(json_content)
                    return AgentResult(
                        status=AgentStatus.COMPLETE,
                        output=data.get("output", "Task completed"),
                        tool_calls=data.get("tool_calls", [])
                    )
                except json.JSONDecodeError:
                    pass

        # Try to parse as direct JSON
        try:
            data = json.loads(response)
            return AgentResult(
                status=AgentStatus.COMPLETE,
                output=data.get("output", "Task completed"),
                tool_calls=data.get("tool_calls", [])
            )
        except json.JSONDecodeError:
            pass

        # Fallback: treat as plain text response
        return AgentResult(
            status=AgentStatus.COMPLETE,
            output=response.strip(),
            tool_calls=[]
        )

    async def _mock_think(self, prompt: str, context: AgentContext) -> AgentResult:
        """Fast mock implementation."""
        prompt_lower = prompt.lower()

        if "create" in prompt_lower and "file" in prompt_lower:
            if "python" in prompt_lower or ".py" in prompt_lower:
                filename = "script.py"
                if "hello" in prompt_lower:
                    filename = "hello.py"
                elif "function" in prompt_lower:
                    filename = "function.py"

                return AgentResult(
                    status=AgentStatus.COMPLETE,
                    output=f"Created {filename}",
                    tool_calls=[{
                        "name": "write",
                        "parameters": {
                            "file_path": filename,
                            "content": "# Generated by fast agent\nprint('Hello, World!')\n"
                        }
                    }]
                )

        elif "read" in prompt_lower:
            return AgentResult(
                status=AgentStatus.COMPLETE,
                output="File content read",
                tool_calls=[{
                    "name": "read",
                    "parameters": {"file_path": "sample.txt"}
                }]
            )

        elif "run" in prompt_lower or "execute" in prompt_lower:
            return AgentResult(
                status=AgentStatus.COMPLETE,
                output="Command executed",
                tool_calls=[{
                    "name": "bash",
                    "parameters": {"command": "echo 'Fast execution'"}
                }]
            )

        return AgentResult(
            status=AgentStatus.COMPLETE,
            output=f"Completed: {prompt}"
        )